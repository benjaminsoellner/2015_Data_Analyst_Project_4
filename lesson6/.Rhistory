data(diamonds)
library(ggplot2)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
p_unlock()
library("pacman")
data(diamonds)
library(ggplot2)
data(diamonds)
ggplot(data=diamonds, aes(x=weight, y=price)) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99))
ggplot(data=diamonds, aes(x=weight, y=price)) +
geom_point() +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99))
View(diamonds)
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99))
?I
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(color=I('black'), fill=I('orange')) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99))
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(color=I('black'), fill=I('orange'), shape=21) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99))
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(color=I('black'), fill=I('orange'), shape=21) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99)) +
stat_smooth(method="lm")
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(fill=I('orange'), shape=21) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99)) +
stat_smooth(method="lm")
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(fill=I('orange')) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99)) +
stat_smooth(method="lm")
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(color=I('orange')) +
xlim(0,quantile(diamonds$weight, 0.99)) +
ylim(0,quantile(diamonds$price, 0.99)) +
stat_smooth(method="lm")
install.package("scales")
install.packages("scales")
install.packages("scales")
install.packages("memisc")
install.packages("lattice")
install.packages("car")
install.packages("reshape")
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
plot1 <- qplot(diamonds$price) +
ggtitle('Price')
qplot(diamonds$price) +
ggtitle('Price')
qplot(log10(diamonds$price+1)) +
ggtitle('Price (log10)')
gridExtra(p1,p2)
p1 <- qplot(diamonds$price, fill="orange") +
ggtitle('Price')
p2 <- qplot(log10(diamonds$price+1), fill="blue") +
ggtitle('Price (log10)')
gridExtra(p1,p2)
gridExtra(p1,p2)
library(gridExtra)
gridExtra(p1,p2)
gridExtra(p1,p2)
grid.extra(p1,p2)
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange")) +
ggtitle('Price')
p2 <- qplot(log10(diamonds$price+1), fill=I("blue")) +
ggtitle('Price (log10)')
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange"), binwidth=0.01) +
ggtitle('Price')
p2 <- qplot(log10(diamonds$price+1), fill=I("blue"), binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange"), binwidth=0.01) + ggtitle('Price')
p2 <- qplot(log10(diamonds$price+1), fill=I("blue"), binwidth=0.01) + ggtitle('Price (log10)')
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange"), binwidth=0.01) + ggtitle('Price')
p2 <- qplot(diamonds$price, fill=I("blue"), binwidth=0.01) + scale_x_log10() + ggtitle('Price (log10)')
grid.arrange(p1,p2)
qplot(diamonds$price, fill=I("orange"), binwidth=0.01) + ggtitle('Price')
p1 <- qplot(diamonds$price, fill=I("orange")) + ggtitle('Price')
p1 <- qplot(diamonds$price, fill=I("orange")) + ggtitle('Price')
p2 <- qplot(diamonds$price, fill=I("blue")) + scale_x_log10() + ggtitle('Price (log10)')
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange"), binwidth=1) + ggtitle('Price')
p2 <- qplot(diamonds$price, fill=I("blue"), binwidth=1) + scale_x_log10() + ggtitle('Price (log10)')
grid.arrange(p1,p2)
p1 <- qplot(diamonds$price, fill=I("orange")) + ggtitle('Price')
p2 <- qplot(diamonds$price, fill=I("blue")) + scale_x_log10() + ggtitle('Price (log10)')
grid.arrange(p1,p2)
qplot(carat, price, data=diamonds) +
scale_y_continuous(trans=log10_trans()) +
ggtitle("Price (log10) by Carat")
?trans_new
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat, decreasing=T)))
head(sort(table(diamonds$carat, decreasing=T)))
head(sort(table(diamonds$carat), decreasing=T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alphat=0.02)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alpha=0.02)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(alpha=0.002)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.002) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.05) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.05, size=0.75, position="jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size=0.75, position="jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
?update
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
setwd("h:\Dokumente\GitHub\2015_Data_Analyst_Project_4\lesson6\")
setwd("h:\Dokumente\GitHub\2015_Data_Analyst_Project_4\lesson6\")
setwd("h:/Dokumente/GitHub/2015_Data_Analyst_Project_4/lesson6")
setwd("h:/Dokumente/GitHub/2015_Data_Analyst_Project_4/lesson6")
install.packages("RCurl")
#install.packages("bitops")
install.packages("bitops")
library(RCurl)
library(bitops)
diamondsurl=getBinaryURL('https://github.com/SolomonMg/diamonds-data/blob/master/BigDiamonds.Rda')
load(rawConnection(diamondsurl))
load("BigDiamonds.Rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = bigdiamonds)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$cert =="GIA"])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA"])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA"])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA"])
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA"])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA", ])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$certcert =="GIA", ])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
modelEstimate
10^modelEstimate
exp(modelEstimate)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[complete.cases(diamondsbig) & diamondsbig$price < 10000 & diamondsbig$certcert =="GIA", ])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[complete.cases(diamondsbig) & diamondsbig$price < 10000 & diamondsbig$certcert =="GIA", ])
